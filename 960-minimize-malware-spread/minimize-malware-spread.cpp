class Solution {
public:
    unordered_map<int,vector<int>> adj;
    int dfs(int node, unordered_map<int,bool> &visited) {
        int size = 1;
        visited[node] = true;
        for(auto &child : adj[node]) {
            if(!visited[child]) {
                size += dfs(child, visited);
            }
        }
        return size;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for(int i = 0;i < n;i++) {
            for(int j = 0;j < n;j++) {
                if(graph[i][j] == 1) {
                    adj[i].push_back(j);
                }
            }
        }
        int sz = initial.size();
        int mi = INT_MAX;
        int ind = -1;
        // sort(initial.begin(),initial.end());
        for(int i = 0;i < sz;i++) {
            unordered_map<int,bool> visited;
            int total_size = 0;
            for(int j = 0;j < sz;j++) {
                if(i != j && !visited[initial[j]]) {
                    total_size += dfs(initial[j], visited);
                }
            }
            if(total_size < mi) {
                mi = total_size;
                ind = initial[i];
            }
            else if(total_size == mi) {
                ind = min(ind, initial[i]);
            }
        }
        return ind;
    }
};