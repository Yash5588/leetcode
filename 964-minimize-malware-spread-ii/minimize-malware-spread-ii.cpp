class Solution {
public:
    unordered_map<int,vector<int>> adj;
    int dfs(int node, vector<bool> &visited, int remove_node) {
        visited[node] = true;
        int size = 1;
        for(auto &child : adj[node]) {
            if(child != remove_node && !visited[child]) {
                size += dfs(child, visited, remove_node);
            }
        }
        return size;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for(int i = 0;i < n;i++) {
            for(int j = 0;j < n;j++) {
                if(graph[i][j] == 1) {
                    adj[i].push_back(j);
                }
            }
        }
        int sz = initial.size();
        int mi = INT_MAX;
        int ind = -1;
        sort(initial.begin(),initial.end());
        for(int i = 0; i < sz;i++) {
            int remove_node = initial[i];
            vector<bool> visited(n,false);
            int total_nodes = 0;
            for(int j = 0;j < sz;j++) {
                if(initial[j] != remove_node && !visited[initial[j]]) {
                    total_nodes += dfs(initial[j], visited, remove_node);
                }
            }
            // cout << total_nodes << ' ' << remove_node << endl;
            if(mi > total_nodes) {
                mi = total_nodes;
                ind = remove_node;
            }
            // if(mi == total_nodes) {
            //     mi = min(mi, remove_node);
            // }
        }
        return ind;
    }
};